sigma <- matrix(c(10000, 60, 60, 1), byrow=TRUE, nr=2)
sigma
# 상관행렬 로 구하기
sigma.X <- na.omit(sigma[:])
# 상관행렬 로 구하기
sigma.X <- na.omit(sigma[0:1])
sigma.X
# 상관행렬 로 구하기
sigma.X <- na.omit(sigma[0:2])
sigma.X
# 상관행렬 로 구하기
sigma.X <- sigma[c("x1", "x2")]
cor(sigma.X)
# 상관행렬 로 구하기
sigma.X <- na.omit(sigma[0:2])
cor(sigma.X)
# 미국 범죄통계
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE)
# 미국 범죄통계
library(tidyverse)
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE)
crim
crime
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, encoding='utf-8')
# 미국 범죄통계
crime <- read.csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, encoding='utf-8')
# 미국 범죄통계
crime <- read.csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
encoding='utf-8', header=T, fileEncoding = 'utf-8')
# 미국 범죄통계
crime <- read.csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
encoding='utf-8', header=T, fileEncoding = 'euk-kr')
crime
# 미국 범죄통계
library(tidyverse)
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
crime
libraray(psych)
library(psych)
install.packages("tmvnsim")
library(psych)
crime.X <- na.omit(crime[2:7])
crime.X
crime.X <- na.omit(crime['murder'])
crime.X
crime.X <- na.omit(crime.murder)
crime.X <- na.omit(crime['murder'], crime['rape'])
crime.X
## 필요없는 컬럼 drop
crime <- crime[, -c(6:7)]
crime
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
crime
## 필요없는 컬럼 drop
crime <- crime[, -c(6, 11, 12)]
crime
satis <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/data/satis.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
satis
# 상관행렬 R로 분석
crime.X <- crime[2:8]
crime.X
# 상관행렬 R로 분석
crime.X <- crime[2:7]
crime.X
R <- cor(X)
R <- cor(crime)
R <- cor(crime.X)
R
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
## 6가지 범죄 사용하기 : 필요없는 컬럼 drop
crime <- crime[, -c(11:12)]
crime
R <- cor(crime.X, center=TRUE, scale=TRUE)
R <- cor(crime.X) # 상관행렬 확인
R
## 분석
crime.cor.prcomp <- prcomp(crime.X, center=TRUE, scale=TRUE)
crime.cor.prcomp
## 고유값 출력
crime.cor.prcomp$sdev^2
## 설명분산 요약
summary(crime.cor.prcomp
)
# 미국 범죄통계
library(tidyverse)
crime <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/crime-kr.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
crime
## 6가지 범죄 사용하기 : 필요없는 컬럼 drop
crime <- crime[, -c(11:12)]
crime
# 상관행렬 R로 분석
crime.X <- crime[2:7]
crime.X
# 상관행렬 R로 분석
crime.X <- crime[2:8]
crime.X
## 상관행렬 확인
R <- cor(crime.X)
R
## 분석
crime.cor.prcomp <- prcomp(crime.X, center=TRUE, scale=TRUE)
crime.cor.prcomp
## 고유값 출력
crime.cor.prcomp$sdev^2
## 설명분산 요약
summary(crime.cor.prcomp)
crime.cor.score <- cbind(crime, crime.cor.prcomp$x[, 1:2])
crime.cor.score
eig <- eigen(R)
V <- eig$vectors
L <- diag(eig$values)
SVD <- cbind(eig, V, L)
eig
V
L
proc.princomp <- function(x, cor=T){
if(cor) S <- cor(x, use="complete")
else S <- cov(x, use="complete")
eigS <- eigen(S)
dimnames(eigS$vectors) <- list(colnames(x), paste0("PC", 1:ncol(X)))
list(coef=eigS$vectors, var=eigS$values, cor=cor)
}
res
res <- cbind(sqrt(pc$var), pc$var, -c(diff(pc$var), NA), pc$var/sum(pc$var), cumsum(pc$var)/sum(pc$var))
rownames(res) <- paste0("PC", 1:length(pc$var))
rownames(res) <- paste0("PC", 1:length(pc$var))
rownames(res) <- paste0("PC", 1:length(pc$var))
summary.proc.princomp <- function(pc) {
res <- cbind(sqrt(pc$var), pc$var, -c(diff(pc$var), NA), pc$var/sum(pc$var), cumsum(pc$var)/sum(pc$var))
colnames(res) <- c('sd[PC]', 'EigenValue(V[PC])', 'Difference', 'Proportion', 'Cumulative')
rownames(res) <- paste0("PC", 1:length(pc$var))
res
}
pcscr
predicv.proc.princomp <- function(x, pc) {
if(pc$cor) Z <- scale(x, center=TRUE, scale=TRUE)
else Z <- scale(x, center=TRUE, scale=FALSE)
pcscr <- data.frame(Z%*%pc$coef)
pcscr
}
eig
proc.princomp(R)
proc.princomp(R)
proc.princomp(crime.X)
proc.princomp <- function(x, cor=T){
if(cor) S <- cor(x, use="complete")
else S <- cov(x, use="complete")
eigS <- eigen(S)
dimnames(eigS$vectors) <- list(colnames(x), paste0("PC", 1:ncol(X)))
list(coef=eigS$vectors, var=eigS$values, cor=cor)
}
dimnames(eigS$vectors) <- list(colnames(x), paste0("PC", 1:ncol(x)))
proc.princomp <- function(x, cor=T){
if(cor) S <- cor(x, use="complete")
else S <- cov(x, use="complete")
eigS <- eigen(S)
dimnames(eigS$vectors) <- list(colnames(x), paste0("PC", 1:ncol(x)))
list(coef=eigS$vectors, var=eigS$values, cor=cor)
}
proc.princomp(crime.X)
pc <- proc.princomp(crime.X)
summary.proc.princomp(pc)
predict.proc.princomp(crime.X, pc)
predict.proc.princomp <- function(x, pc) {
if(pc$cor) Z <- scale(x, center=TRUE, scale=TRUE)
else Z <- scale(x, center=TRUE, scale=FALSE)
pcscr <- data.frame(Z%*%pc$coef)
pcscr
}
predict.proc.princomp(crime.X, pc)
eig
### 8. 행렬도(biplot) 그리기
biplot(crime.cor.prcomp, cex=1)
abline(h=0, v=0, lty=2)
crime.fa <- principal(crime.X, nfactors = 2, rotate="varimax")
biplot(crime.fa, cex=c(1,1), col=c("blue", "red"))
biplot(x=crime.fa$scores, y=crime.fa$loadings, col=c("blue", "red"),
xlabs=rownames(crime.X), ylabs=colnames(crime.X))
abline(h=0, v=0, lty=2)
abline(h=0, v=0, lty=2)
### 8. 행렬도(biplot) 그리기
biplot(crime.cor.prcomp, cex=1)
oli <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/olivetti_X.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
olioli
oli
oli <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/olivetti_X.csv',
col_names = TRUE, header=TRUE, locale=locale("ko", encoding="euc-kr"))
oli <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/olivetti_X.csv',
locale=locale("ko", encoding="euc-kr"))
oli
oli <- read_csv('C:/Users/foxgi/OneDrive/project/DWU/multivariate/linear_algebra/data/olivetti_X.csv',
col_names = TRUE, locale=locale("ko", encoding="euc-kr"))
oli
# 공분산 행렬 S로 분석하기
oli.X <- oli[1:100]
oli.X
# 공분산 행렬 S로 분석하기
oli.X <- oli[1:]
# 공분산 행렬 S로 분석하기
oli.X <- oli[1:4097]
# 공분산 행렬 S로 분석하기
oli.X <- oli[1:4096]
oli.X
S <- cov(oli.x)
S <- cov(oli.X)
S
cov2cor(sigma)
P <- cov2cor(sigma)
P
eigen(P)
# 공분산행렬에 근거한 주성분분석
eigen(sigma)
sigma <- matrix(c(10000, 60, 60, 1), byrow=TRUE, nr=2)
sigma
# 상관행렬 로 구하기
rho <- cov2cor(sigma)
rho
# 공분산행렬에 근거한 주성분분석
eigen(sigma)
# 상관행렬에 근거한 주성분분석 -> 고유값과 고유벡터
eigen(rho)
proc.princomp <- function(x, cor=T){
if(cor) S <- cor(x, use="complete")
else S <- cov(x, use="complete")
eigS <- eigen(S)
dimnames(eigS$vectors) <- list(colnames(x), paste0("PC", 1:ncol(x)))
list(coef=eigS$vectors, var=eigS$values, cor=cor)
}
summary.proc.princomp <- function(pc) {
res <- cbind(sqrt(pc$var), pc$var, -c(diff(pc$var), NA), pc$var/sum(pc$var), cumsum(pc$var)/sum(pc$var))
colnames(res) <- c('sd[PC]', 'EigenValue(V[PC])', 'Difference', 'Proportion', 'Cumulative')
rownames(res) <- paste0("PC", 1:length(pc$var))
res
}
predict.proc.princomp <- function(x, pc) {
if(pc$cor) Z <- scale(x, center=TRUE, scale=TRUE)
else Z <- scale(x, center=TRUE, scale=FALSE)
pcscr <- data.frame(Z%*%pc$coef)
pcscr
}
## 6가지 범죄 사용하기 : 필요없는 컬럼 drop
crime <- crime[, -c(11:12)]
